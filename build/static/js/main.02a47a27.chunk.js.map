{"version":3,"sources":["components/MultiLine/MultilineChat.jsx","components/Table/TableBlock.jsx","utiles.js","App.js","serviceWorker.js","index.js"],"names":["MultilineChat","data","console","log","className","height","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","TableBlock","id","Date","getUTCMilliseconds","length","columns","title","dataIndex","key","pagination","rowKey","dataSource","lengthData","splice","getData","currencySign","fetch","then","res","json","filteringArray","conversion_rates","catch","err","Error","val","Object","keys","filter","includes","reduce","obj","combineObj","values","pop","shift","mokeData","EUR","USD","App","useState","setData","useEffect","timeout","setInterval","Promise","all","clearTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2TAae,SAASA,EAAT,GAAkC,IAATC,EAAQ,EAARA,KAEtC,OADAC,QAAQC,IAAIF,GAEV,yBAAKG,UAAU,mBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAQ,IACRJ,KAAMA,EACNK,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAE/C,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAMC,KAAK,WAAWD,QAAQ,MAAME,OAAO,YAC3C,kBAAC,IAAD,CAAMD,KAAK,WAAWD,QAAQ,MAAME,OAAO,e,oBCzBtC,SAASC,EAAT,GAA+B,IAATd,EAAQ,EAARA,KAC7Be,GAAK,IAAIC,MAAOC,qBACtBhB,QAAQC,IAAIa,GAaZ,OAAIf,EAAKkB,OAAS,EAEd,yBAAKf,UAAU,eACb,kBAAC,IAAD,CACEgB,QAhBQ,CACd,CACEC,MAAO,MACPC,UAAW,MACXC,IAAK,OAEP,CACEF,MAAO,MACPC,UAAW,MACXC,IAAK,QAQDC,YAAY,EACZC,OAAQT,EACRU,WAAYzB,IALhB,KAWG,wC,oBC5BI0B,EAAa,SAAA1B,GAAI,OAAKA,EAAKkB,OAAS,GAAKlB,EAAK2B,OAAO,EAAG,GAAK3B,GAE7D4B,EAAU,SAAAC,GACrB,OAAOC,MAAM,yEAAD,OAC+DD,IAExEE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAA/B,GAAI,OAAIkC,EAAelC,EAAKmC,iBAAkBN,MACnDO,OAAM,SAAAC,GACL,MAAM,IAAIC,MAAMD,OAIhBH,EAAiB,SAACK,EAAKV,GAAN,OACrBW,OAAOC,KAAKF,GACTG,QAAO,SAAApB,GAAG,MAnBK,MAmBWqB,SAASrB,MACnCsB,QAAO,SAACC,EAAKvB,GAEZ,OADAuB,EAAIhB,GAAgBU,EAAIjB,GACjBuB,IACN,KAEMC,EAAa,SAAAC,GACxB,OAAO,eAAKA,EAAOC,MAAnB,GAA6BD,EAAOE,UCfhCC,EAAW,CACf,CACEC,IAAK,GACLC,IAAK,IAEP,CACED,IAAK,GACLC,IAAK,IAEP,CACED,IAAK,GACLC,IAAK,KAgCMC,MA5Bf,WAAgB,IAAD,EACWC,mBAASJ,GADpB,mBACNlD,EADM,KACAuD,EADA,KAiBb,OAdAC,qBAAU,WACR,IAAMC,EAAUC,aAAY,WAC1BC,QAAQC,IAAI,CAAChC,ED5BM,OC4BcA,ED7Bd,SC8BhBG,KAAKe,GACLf,MAAK,SAAAQ,GAAG,OAAIgB,EAAQ,GAAD,mBAAKvD,GAAL,CAAWuC,QAC9BH,OAAM,SAAAC,GACL,MAAM,IAAIC,MAAMD,QAEnB,KACH,OAAO,WACLwB,aAAaJ,MAEd,CAACzD,EAAMA,EAAKkB,SAGb,yBAAKf,UAAU,OACb,wBAAIA,UAAU,cAAd,0DACA,6BACE,kBAACJ,EAAD,CAAeC,KAAM0B,EAAW1B,KAChC,kBAACc,EAAD,CAAYd,KAAM0B,EAAW1B,Q,OCpCjB8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdxC,OAAM,SAAAyC,GACL5E,QAAQ4E,MAAMA,EAAMC,c","file":"static/js/main.02a47a27.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  ResponsiveContainer,\r\n  LineChart,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  Line\r\n} from \"recharts\";\r\nimport \"./style.css\";\r\n\r\nexport default function MultilineChat({ data }) {\r\n  console.log(data);\r\n  return (\r\n    <div className=\"multiline-block\">\r\n      <ResponsiveContainer>\r\n        <LineChart\r\n          height={250}\r\n          data={data}\r\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Line type=\"monotone\" dataKey=\"EUR\" stroke=\"#8884d8\" />\r\n          <Line type=\"monotone\" dataKey=\"USD\" stroke=\"#82ca9d\" />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Table } from \"antd\";\r\nimport \"./Table.css\";\r\n\r\nexport default function TableBlock({ data }) {\r\n  const id = new Date().getUTCMilliseconds();\r\n  console.log(id);\r\n  const columns = [\r\n    {\r\n      title: \"USD\",\r\n      dataIndex: \"USD\",\r\n      key: \"USD\"\r\n    },\r\n    {\r\n      title: \"EUR\",\r\n      dataIndex: \"EUR\",\r\n      key: \"EUR\"\r\n    }\r\n  ];\r\n  if (data.length > 0) {\r\n    return (\r\n      <div className=\"table-block\">\r\n        <Table\r\n          columns={columns}\r\n          pagination={false}\r\n          rowKey={id}\r\n          dataSource={data}\r\n        />\r\n        ;\r\n      </div>\r\n    );\r\n  }\r\n  return <div>Loading</div>;\r\n}\r\n","const getRightVal = \"RUB\";\r\n\r\nexport const apiForUSD = \"USD\";\r\nexport const apiForEUR = \"EUR\";\r\nexport const lengthData = data => (data.length > 10 ? data.splice(0, 1) : data);\r\n\r\nexport const getData = currencySign => {\r\n  return fetch(\r\n    `https://prime.exchangerate-api.com/v5/7776dd347f19954be9ec1e46/latest/${currencySign}`\r\n  )\r\n    .then(res => res.json())\r\n    .then(data => filteringArray(data.conversion_rates, currencySign))\r\n    .catch(err => {\r\n      throw new Error(err);\r\n    });\r\n};\r\n\r\nconst filteringArray = (val, currencySign) =>\r\n  Object.keys(val)\r\n    .filter(key => getRightVal.includes(key))\r\n    .reduce((obj, key) => {\r\n      obj[currencySign] = val[key];\r\n      return obj;\r\n    }, {});\r\n\r\nexport const combineObj = values => {\r\n  return { ...values.pop(), ...values.shift() };\r\n};\r\n","import React, { useEffect, useState } from \"react\";\nimport MultilineChat from \"./components/MultiLine/MultilineChat\";\nimport TableBlock from \"./components/Table/TableBlock\";\nimport \"./App.css\";\nimport {\n  apiForUSD,\n  apiForEUR,\n  getData,\n  combineObj,\n  lengthData\n} from \"./utiles\";\nconst mokeData = [\n  {\n    EUR: 78,\n    USD: 84\n  },\n  {\n    EUR: 71,\n    USD: 72\n  },\n  {\n    EUR: 65,\n    USD: 68\n  }\n];\n\nfunction App() {\n  const [data, setData] = useState(mokeData);\n\n  useEffect(() => {\n    const timeout = setInterval(() => {\n      Promise.all([getData(apiForEUR), getData(apiForUSD)])\n        .then(combineObj)\n        .then(val => setData([...data, val]))\n        .catch(err => {\n          throw new Error(err);\n        });\n    }, 5000);\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [data, data.length]);\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"App-header\">Конвертер</h1>\n      <div>\n        <MultilineChat data={lengthData(data)} />\n        <TableBlock data={lengthData(data)} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"antd/dist/antd.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}